package com.gbpdma.io;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;

import com.gbpdma.LocationPoint;
import com.gbpdma.Map;
import com.gbpdma.Polygon;

import android.app.Activity;
import android.content.Context;
import android.util.Xml;

public class FileHandler
{

	FileOutputStream	outputStream;
	final String		TESTSTRING	= new String("Hi");
	Context				context;

	public FileHandler(Context activity)
	{

		context = activity;

	}

	public void writeFile(Map map, String name)
	{
		/*
		 * try {
		 * 
		 * // ##### Write a file to the disk #####
		 * 
		 * We have to use the openFileOutput()-method the ActivityContext
		 * provides, to protect your file from others and This is done for
		 * security-reasons. We chose MODE_WORLD_READABLE, because we have
		 * nothing to hide in our file
		 * 
		 * FileOutputStream fOut = context.openFileOutput("samplefile.txt",
		 * android.content.Context.MODE_PRIVATE); OutputStreamWriter osw = new
		 * OutputStreamWriter(fOut);
		 * 
		 * // Write the string to the file osw.write(TESTSTRING);
		 * 
		 * ensure that everything is really written out and close
		 * 
		 * osw.flush(); osw.close(); } catch (Exception e) {
		 * e.printStackTrace(); }
		 */

		// we have to bind the new file with a FileOutputStream
		FileOutputStream fileos = null;
		try
		{
			fileos = context.openFileOutput(name + ".xml", android.content.Context.MODE_PRIVATE);
		} catch (FileNotFoundException e)
		{
			// Log.e("FileNotFoundException", "can't create FileOutputStream");
		}
		// we create a XmlSerializer in order to write xml data
		XmlSerializer serializer = Xml.newSerializer();
		try
		{
			// we set the FileOutputStream as output for the serializer, using
			// UTF-8 encoding
			serializer.setOutput(fileos, "UTF-8");
			// Write <?xml declaration with encoding (if encoding not null) and
			// standalone flag (if standalone not null)
			serializer.startDocument(null, Boolean.valueOf(true));
			// set indentation option
			serializer.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output", true);
			// start a tag called "root"
			serializer.startTag(null, "map");
			serializer.attribute(null, "name", map.name);

			serializer.startTag(null, "boundary");

			for (LocationPoint point : map.boundary.points)
			{
				serializer.startTag(null, "point");
				serializer.attribute(null, "longitude", Double.toString(point.getLongitude()));
				serializer.attribute(null, "latitude", Double.toString(point.getLatitude()));
				serializer.endTag(null, "point");
			}

			serializer.endTag(null, "boundary");

			for (Polygon landmark : map.landmarks)
			{
				serializer.startTag(null, "landmark");
				serializer.attribute(null, "name", landmark.getName());

				for (LocationPoint point : landmark.points)
				{
					serializer.startTag(null, "point");
					serializer.attribute(null, "longitude", Double.toString(point.getLongitude()));
					serializer.attribute(null, "latitude", Double.toString(point.getLatitude()));
					serializer.endTag(null, "point");
				}

				serializer.endTag(null, "landmark");
			}

			serializer.endTag(null, "map");

			serializer.endDocument();
			// write xml data into the FileOutputStream
			serializer.flush();
			// finally we close the file stream
			fileos.close();
		} catch (Exception e)
		{
			// Log.e("Exception", "error occurred while creating xml file");
		}

	}

	public Map readFile(String name) throws XmlPullParserException
	{
		/*
		 * try { // ##### Read the file back in #####
		 * 
		 * 
		 * We have to use the openFileInput()-method the ActivityContext
		 * provides. Again for security reasons with openFileInput(...)
		 * 
		 * FileInputStream fIn = context.openFileInput("samplefile.txt");
		 * InputStreamReader isr = new InputStreamReader(fIn);
		 * 
		 * Prepare a char-Array that will hold the chars we read back in.
		 * 
		 * char[] inputBuffer = new char[100]; // Fill the Buffer with data from
		 * the file isr.read(inputBuffer); // Transform the chars to a String
		 * String readString = new String(inputBuffer);
		 * 
		 * } catch (IOException ioe) { ioe.printStackTrace(); }
		 */
		Map map = null;
		FileInputStream fileis = null;
		try
		{
			fileis = context.openFileInput(name + ".xml");
		} catch (FileNotFoundException e)
		{
			// Log.e("FileNotFoundException", "can't create FileOutputStream");
		}

		XmlPullParserFactory factory;
		XmlPullParser xpp = null;
		try
		{
			factory = XmlPullParserFactory.newInstance();
			factory.setNamespaceAware(true);

			xpp = factory.newPullParser();

			xpp.setInput(fileis, "UTF-8");
		} catch (XmlPullParserException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// int a;
		// try
		// {
		// a = xpp.getEventType();
		// } catch (XmlPullParserException e1)
		// {
		// // TODO Auto-generated catch block
		// e1.printStackTrace();
		// }
		// try
		// {
		// while ((a=xpp.getEventType())!=XmlPullParser.END_DOCUMENT)
		// {
		// a=0;
		// }
		// } catch (XmlPullParserException e)
		// {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// }
		Polygon currentPolygon= null;
		int eventType = xpp.getEventType();
		// process tag while not reaching the end of document
		while (eventType != XmlPullParser.END_DOCUMENT)
		{
			switch (eventType)
			{
			// at start of document: START_DOCUMENT
				case XmlPullParser.START_DOCUMENT:
				{
					break;
				}

				// at start of a tag: START_TAG
				case XmlPullParser.START_TAG:
				{
					// get tag name
					String tagName = xpp.getName();
					// if <study>, get attribute: 'id'
					if (tagName.equalsIgnoreCase("map"))
					{
						map = new Map(xpp.getAttributeValue(null, "name"));
					} else if (tagName.equalsIgnoreCase("boundary"))
					{
						currentPolygon=map.boundary=new Polygon(xpp.getAttributeValue(null, "name"));
					}
					else if (tagName.equalsIgnoreCase("landmark"))
					{
						currentPolygon=new Polygon(xpp.getAttributeValue(null, "name"));
						map.landmarks.add(currentPolygon);
					}
					else if (tagName.equalsIgnoreCase("point"))
					{
						currentPolygon.points.add(new LocationPoint(Double.parseDouble(xpp.getAttributeValue(null, "longitude")),Double.parseDouble(xpp.getAttributeValue(null, "latitude"))));
					}
					break;
				}
			}
			// jump to next event
			try
			{
				eventType = xpp.next();
			} catch (XmlPullParserException e)
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e)
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return map;
	}

}
