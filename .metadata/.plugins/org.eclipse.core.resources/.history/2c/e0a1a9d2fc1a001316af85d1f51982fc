package com.gbpdma;

import java.util.Observable;
import java.util.Observer;
import java.util.Timer;
import java.util.TimerTask;

import com.gbpdma.R;
import com.gbpdma.location.GPS;
import com.gbpdma.logic.LocationPoint;
import com.gbpdma.logic.Plan;
import com.gbpdma.logic.Polygon;
import com.gbpdma.io.FileHandler;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Color;
import android.location.LocationManager;
import android.os.Bundle;
import android.view.Gravity;
import android.view.View;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.TextView;
import android.widget.Toast;

/**
 * CreateMap Class
 * 
 * This class represents the activity which handles the creation of a plan.
 * 
 * @author yasuravithana
 * 
 */

public class CreatePlan extends Activity implements Observer
{

	/*
	 * this class implements Observer, and gets notifications for changes in the
	 * location of the device and changes in the status of the GPS system.
	 */

	GPS				gps;		// This is the instance of the GPS class which
								// handles the location service.

	TextView		txtInfo;	// Placeholder for the TextView that currently
								// displays the location information.
	EditText		mapNameBox, landmarkNameBox;	// variables to hold
													// references to the text
													// boxes where user inputs.
	StringBuilder	sb;								// This is used to build the
													// string displayed in the
													// textInfo.
	Plan			plan;							// Holds the reference to
													// the currently working
													// plan
	Polygon			currentPolygon;					// Holds the reference to
													// the polygon that the user
	long			timeOffset;//This will hold the difference between System time and Satellite time. 
	int				indexToStartTime;//This is used to keep the position in the string where time value starts to rewrite it.
	Timer			timer;//Used to update the "time since this lock"

	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.enter_map_name);

		mapNameBox = (EditText) findViewById(R.id.editText1);

		//Creation of the location manager to access location and GPS status services
		gps = new GPS((LocationManager) getSystemService(LOCATION_SERVICE), this);

	}

	@Override
	protected void onResume()
	{
		/*
		 * onResume is is always called after onStart, even if the app hasn't
		 * been paused
		 * 
		 * add location listener and request updates every 1000ms or 1m
		 */
		gps.resume();
		super.onResume();
	}

	@Override
	protected void onPause()
	{
		/* GPS, as it turns out, consumes battery like crazy */
		gps.pause();
		super.onPause();
	}

	@Override
	protected void onStop()
	{
		/*
		 * may as well just finish since saving the state is not important for
		 * this toy app
		 */
		// finish();
		super.onStop();
	}

	public void nextAfterMapNameClicked(View view)
	{

		plan = new Plan(mapNameBox.getText().toString());
		setContentView(R.layout.add_boundary_points);/*
													 * get TextView to display
													 * the GPS data
													 */
		txtInfo = (TextView) findViewById(R.id.textInfo);
		gps.addObserver(this);
		timer = new Timer();
		timer.scheduleAtFixedRate(new TimerTask()
		{

			@Override
			public void run()
			{

				runOnUiThread(new Runnable()
				{

					@Override
					public void run()
					{
						if (sb != null)
						{
							sb.delete(indexToStartTime, sb.length());
							sb.append(Long.toString((System.currentTimeMillis() - gps.getTime() - timeOffset) / 1000) + " s");
							txtInfo.setText(sb.toString());
						}
					}

				});
			}

		},
		// Set how long before to start calling the TimerTask (in milliseconds)
		0,
		// Set the amount of time between each execution (in milliseconds)
		1000);
	}

	public void addBoundryPointClicked(View view)
	{
		plan.boundary.points.add(new LocationPoint(gps.getLongitude(), gps.getLatitude()));
		Toast toast = Toast.makeText(this, "Point added to the boundary.", Toast.LENGTH_SHORT);
		toast.setGravity(Gravity.CENTER, 0, 0);
		toast.show();
	}

	public void addLandmarksClicked(View view)
	{
		setContentView(R.layout.enter_landmark_name);
		landmarkNameBox = (EditText) findViewById(R.id.editTextLandmarkName);
	}

	public void nextAfterLandmarkNameClicked(View view)
	{
		plan.landmarks.add(currentPolygon = new Polygon(landmarkNameBox.getText().toString()));
		setContentView(R.layout.add_landmark_points);/*
													 * get TextView to display
													 * the GPS data
													 */
		txtInfo = (TextView) findViewById(R.id.textInfoInLandmarks);

		timer = new Timer();
		timer.scheduleAtFixedRate(new TimerTask()
		{

			@Override
			public void run()
			{

				runOnUiThread(new Runnable()
				{

					@Override
					public void run()
					{
						if (sb != null)
						{
							sb.delete(indexToStartTime, sb.length());
							sb.append(Long.toString((System.currentTimeMillis() - gps.getTime() - timeOffset) / 1000) + " s");
							txtInfo.setText(sb.toString());
						}
					}

				});
			}

		},
		// Set how long before to start calling the TimerTask (in milliseconds)
		0,
		// Set the amount of time between each execution (in milliseconds)
		1000);
	}

	public void addLandmarkPointClicked(View view)
	{
		currentPolygon.points.add(new LocationPoint(gps.getLongitude(), gps.getLatitude()));
		Toast toast = Toast.makeText(this, "Point added to the landmark.", Toast.LENGTH_SHORT);
		toast.setGravity(Gravity.CENTER, 0, 0);
		toast.show();
	}

	public void newLandmarkClicked(View view)
	{
		setContentView(R.layout.enter_landmark_name);
		landmarkNameBox = (EditText) findViewById(R.id.editTextLandmarkName);
	}

	public void finishMapClicked(View view)
	{
		new FileHandler(this).writeFile(plan, plan.name);
		Toast toast = Toast.makeText(this, "Map saved succesfully.", Toast.LENGTH_SHORT);
		toast.setGravity(Gravity.CENTER, 0, 0);
		toast.show();
		Intent intent = new Intent(this, Welcome.class);
		startActivity(intent);
	}

	@Override
	public void update(Observable arg0, Object arg1)
	{
		timeOffset = System.currentTimeMillis() - gps.getTime();
		// txtInfo.setText(Double.toString(gps.getLongitude()));
		sb = new StringBuilder(512);

		/* display some of the data in the TextView */

		sb.append("Longitude: ");
		sb.append(gps.getLongitude());
		sb.append('\n');

		sb.append("Latitude: ");
		sb.append(gps.getLatitude());
		sb.append('\n');

		sb.append("Accuracy: ");
		sb.append(gps.getAccuracy() + " m");
		sb.append('\n');

		sb.append("Time since this fix: ");

		txtInfo.setText(sb.toString());
		indexToStartTime = sb.length();
	}
}
